datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum ActivityTypeValues {
  TEXT
  VIDEO
}

enum ActivityInstructionTypeValues {
  TEXT
  OPTIONS
}

enum CefrValues {
  A1
  A2
  B1
  B2
  C1
  C2
}

model User {
  id            String    @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?   @unique
  image String
  role String?
  tokenVersion Int @default(0)
  authApiId String @unique
  
  student Student?
  instructor Instructor?
}

model Instructor {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId String @unique

  associationInvitations StudentInstructorAssociationInvitation[]
  activities Activity[]
  students Student[]
}

model Student {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cefr    CefrValues?

  outputs StudentOutput[]
  activityList StudentActivityList[]
  associationInvitations StudentInstructorAssociationInvitation[]

  user User @relation(fields: [userId], references: [id])
  userId String @unique
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  instructorId String?
}

model StudentInstructorAssociationInvitation {
  id        String   @id @default(uuid())

  token String @unique
  accepted Boolean

  student Student @relation(fields: [studentId], references: [id])
  studentId String 
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String 
}

model InstructionStudentOutput {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  textOutput String?
  optionsSelections ActivityInstructionOption[] @relation(name: "selected")
  feedback FeedbackToInstructionStudentOutput?

  instruction   ActivityInstruction? @relation(fields: [instructionId], references: [id])
  instructionId String?
  studentOutput StudentOutput? @relation(fields: [studentOutputId], references: [id])
  studentOutputId Int?
}

model ActivityInstructionOption {
  id        String   @id @default(uuid())
  text String

  isOptionOf   ActivityInstruction? @relation(fields: [isOptionOfId], references: [id], name: "option")
  isOptionOfId String?
  isAnswerOf   ActivityInstruction? @relation(fields: [isAnswerOfId], references: [id], name: "answer")
  isAnswerOfId String?
  isSelectedIn InstructionStudentOutput? @relation(fields: [isSelectedInId], references: [id], name: "selected")
  isSelectedInId String?
}

model ActivityInstruction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text    String
  isMultiCorrect Boolean

  options ActivityInstructionOption[] @relation(name: "option")
  optionsAnswers ActivityInstructionOption[] @relation(name: "answer")
  textAnswer String?

  studentOutputs InstructionStudentOutput[]
  type ActivityInstructionTypeValues

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
}

model FeedbackToInstructionStudentOutput {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String

  instructionStudentOutput InstructionStudentOutput? @relation(fields: [instructionStudentOutputId], references: [id])
  instructionStudentOutputId String? @unique
}

model Activity {
  id        Int   @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  topics          String[]
  timeToComplete Int?
  content  String
  startTime Int?
  endTime   Int?

  contentType      ActivityTypeValues
  cefr           CefrValues

  instructions ActivityInstruction[]
  outputs StudentOutput[]
  isStudentActivityListOf StudentActivityList[]

  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String
}

model StudentOutput {
  id        Int   @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outputs InstructionStudentOutput[]
  feedbackGiven Boolean

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
  student           Student?        @relation(fields: [studentId], references: [id])
  studentId         String?
}

model StudentActivityList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student           Student?        @relation(fields: [studentId], references: [id])
  studentId         String?
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
  @@unique([studentId, activityId])
}
//writing "version ActivityVersion" autocompletes the id, the @s and the one-to-many in the other table

// RELATIONS
// for one-to-one, one of the entities will have only the field referencing the other, 
// and the other will have two fields, including the one with the @relation decorator.

// for many-to-one, place an array on the entity that holds many,
// and the one entity plus a field for its id in the many entity.

// for many-to-many, just create the array fields in both entities and
// prisma creates the relationships table automatically. If you want to
// manipulate this relationship entity somehow, explicitly declare it.
